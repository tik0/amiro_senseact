<launch>

  <!-- ################################################# -->
  <!-- rsb_to_ros_bridge -->
  <!-- ################################################# -->
  <!-- <param name="rostimenow" value="true" type="bool" /> -->
  <!-- <node name="rst_vision_image_to_ros_sensormsgs_image" pkg="rsb_to_ros_bridge" type="rst_vision_image_to_ros_sensormsgs_image" respawn="false" output="screen" cwd="ROS_HOME">
    <param name="rsb_listener_scope" value="/image/depth"/>
    <param name="ros_publish_image_topic" value="/image"/>
    <param name="ros_publish_Compressed_image_topic" value="/image/compressed"/>
    <param name="image_compression_format" value="jpg"/>
  </node> -->
  <!-- <node name="rsb_twb_to_ros_navmsgs_odometry" pkg="rsb_to_ros_bridge" type="rsb_twb_to_ros_navmsgs_odometry" respawn="false" output="screen" cwd="ROS_HOME">
    <param name="rsb_listener_scope" value="/tracking/merger"/>
    <param name="ros_publish_topic" value="/tracking"/>
  </node> -->
  <node name="rst_pose_to_ros_navmsgs_odometry" pkg="rsb_to_ros_bridge" type="rst_pose_to_ros_navmsgs_odometry" respawn="false" output="screen" cwd="ROS_HOME">
    <param name="rsb_listener_scope" value="/amiro1/pose"/>
    <param name="ros_publish_topic" value="/amiro1/odom"/>
    <param name="rostimenow" value="true" type="bool" />
  </node>
  <!-- <node name="rst_pose_to_ros_posestamped" pkg="rsb_to_ros_bridge" type="rst_pose_to_ros_posestamped" respawn="false" output="screen" cwd="ROS_HOME">
    <param name="rsb_listener_scope" value="/pose"/>
    <param name="ros_publish_topic" value="/pose"/>
  </node> -->
  <!-- <node name="rst_value_array_to_ros_int_array" pkg="rsb_to_ros_bridge" type="rst_value_array_to_ros_int_array" respawn="false" output="screen" cwd="ROS_HOME">
    <param name="rsb_listener_scope" value="/rir_prox/original"/>
    <param name="ros_publish_topic" value="/rir_prox"/>
  </node> -->
  <node name="rst_vision_laserscan_to_ros_sensormsgs_Laserscan" pkg="rsb_to_ros_bridge" type="rst_vision_laserscan_to_ros_sensormsgs_Laserscan" respawn="false" output="screen" cwd="ROS_HOME">
    <param name="rsb_listener_scope" value="/amiro1/laserscan"/>
    <param name="ros_publish_topic" value="/amiro1/laserscan"/>
    <param name="offset_scan" value="3.92699"/>
    <param name="rostimenow" value="true" type="bool" />
  </node>

  <!-- ################################################# -->
  <!-- ros_to_rsb_bridge -->
  <!-- ################################################# -->

  <!-- <node name="ros_geometry_msgs_posestamped_to_rst_geometry_pose" pkg="ros_to_rsb_bridge" type="ros_geometry_msgs_posestamped_to_rst_geometry_pose" respawn="false" output="screen" cwd="ROS_HOME">
    <param name="ros_listener_topic" value="/pose"/>
    <param name="rsb_publish_scope" value="/pose"/>
  </node> -->
  <node name="ros_geometry_msgs_twist_to_rst_value_array" pkg="ros_to_rsb_bridge" type="ros_geometry_msgs_twist_to_rst_value_array" respawn="false" output="screen" cwd="ROS_HOME">
    <param name="ros_listener_topic" value="/teleop_velocity_smoother/raw_cmd_vel"/>
    <param name="rsb_publish_scope" value="/motor/5"/>
  </node>
  <!-- <node name="ros_int_multiarray_rst_value_array" pkg="ros_to_rsb_bridge" type="ros_int_multiarray_rst_value_array" respawn="false" output="screen" cwd="ROS_HOME">
    <param name="ros_listener_topic" value="/motor"/>
    <param name="rsb_publish_scope" value="/motor/10"/>
  </node> -->



  <!-- ################################################# -->
  <!-- tf -->
  <!-- ################################################# -->
  <!-- <node pkg="tf" type="static_transform_publisher" name="link1_broadcaster" args="x y z qx qy qz qw frame_id child_frame_id  period_in_ms" /> -->
  <!--  TF1  -->
  <node pkg="tf" type="static_transform_publisher" name="amiro1_map_odom" args="1 1 0 0 0 0 1 map amiro1/odom 100" />
  <!--  TF2  -->
  <node pkg="dynamic_transform" type="dynamic_tf_with_odom" name="amiro1_odom_base_link">
    <param name="ros_listener_odom_topic" value="/amiro1/odom"/>
    <param name="parent_frame" value="amiro1/odom"/>
    <param name="child_frame" value="amiro1/base_link"/>
    <param name="rostimenow" value="true" type="bool" />
  </node>
  <!--  TF3  -->
  <node pkg="tf" type="static_transform_publisher" name="amiro1_base_link_base_laser" args="0 0 0.10 0 0 0 1 amiro1/base_link amiro1/base_laser 100" />


  <!-- ################################################# -->
  <!-- Other -->
  <!-- ################################################# -->
  <!-- <node name="image_view" pkg="rqt_image_view" type="rqt_image_view"/> -->
  <node name="rqt_topic" pkg="rqt_topic" type="rqt_topic"/>
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(env MUROX_ROS)/config.rviz"/>
  <!-- <node name="rqt_gui" pkg="rqt_gui" type="rqt_gui"/> -->
  <node pkg="mapping" type="ros_laser_scan_to_ros_pointcloud2" name="amiro1_laser_to_point">
    <param name="laserscan_topic" value="/amiro1/laserscan"/>
    <param name="pointcloud2_topic" value="/amiro1/pointcloud2"/>
    <!-- <param name="target_frame" value="amiro1/base_laser"/> -->
  </node>


  <!-- ################################################# -->
  <!-- includes -->
  <!-- ################################################# -->
  <!-- <include file="$(env MUROX_ROS)/xbox360_teleop.launch"/> -->
  <!-- <include file="$(find urdf_tutorial)/launch/display.launch">
    <arg name="model" value="$(env MUROX_ROS)/amiro.urdf" />
    <arg name="rvizconfig" value="$(env MUROX_ROS)/config.rviz" />
  </include> -->
  <!-- <include file="$(find amiro_2dnav)/move_base.launch"/> -->
  <!-- <include file="$(env MUROX_ROS)/keyboard_teleop.launch"/> -->


  <!-- ################################################# -->
  <!-- Mapping algorithms -->
  <!-- ################################################# -->
  <!--  TF1 has to be turned off, when gmapping is activated.  -->
  <!-- <node pkg="gmapping" type="slam_gmapping" name="gmapping_thing" output="screen" clear_params="true">
      <remap from="scan" to="/amiro1/laserscan" />
      <param name="base_frame" value="amiro1/base_link" />
      <param name="odom_frame" value="amiro1/odom" />
      <param name="map_update_interval" value="0.1"/>
    </node>  -->
  <!--  Octomapping is just a mapping algorithm, SLAM has to be done somewhere else.-->
  <!-- <include file="$(env MUROX_ROS)/src/mapping/octomap.launch"/> -->

</launch>
