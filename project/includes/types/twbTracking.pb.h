// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: twbTracking.proto

#ifndef PROTOBUF_twbTracking_2eproto__INCLUDED
#define PROTOBUF_twbTracking_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace twbTracking {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_twbTracking_2eproto();
void protobuf_AssignDesc_twbTracking_2eproto();
void protobuf_ShutdownFile_twbTracking_2eproto();

class Pose2D;
class Pose2DList;

// ===================================================================

class Pose2D : public ::google::protobuf::Message {
 public:
  Pose2D();
  virtual ~Pose2D();

  Pose2D(const Pose2D& from);

  inline Pose2D& operator=(const Pose2D& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pose2D& default_instance();

  void Swap(Pose2D* other);

  // implements Message ----------------------------------------------

  Pose2D* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pose2D& from);
  void MergeFrom(const Pose2D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional int32 id = 3 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional float orientation = 4 [default = 0];
  inline bool has_orientation() const;
  inline void clear_orientation();
  static const int kOrientationFieldNumber = 4;
  inline float orientation() const;
  inline void set_orientation(float value);

  // @@protoc_insertion_point(class_scope:twbTracking.proto.Pose2D)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_orientation();
  inline void clear_has_orientation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;
  ::google::protobuf::int32 id_;
  float orientation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_twbTracking_2eproto();
  friend void protobuf_AssignDesc_twbTracking_2eproto();
  friend void protobuf_ShutdownFile_twbTracking_2eproto();

  void InitAsDefaultInstance();
  static Pose2D* default_instance_;
};
// -------------------------------------------------------------------

class Pose2DList : public ::google::protobuf::Message {
 public:
  Pose2DList();
  virtual ~Pose2DList();

  Pose2DList(const Pose2DList& from);

  inline Pose2DList& operator=(const Pose2DList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pose2DList& default_instance();

  void Swap(Pose2DList* other);

  // implements Message ----------------------------------------------

  Pose2DList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pose2DList& from);
  void MergeFrom(const Pose2DList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .twbTracking.proto.Pose2D pose = 1;
  inline int pose_size() const;
  inline void clear_pose();
  static const int kPoseFieldNumber = 1;
  inline const ::twbTracking::proto::Pose2D& pose(int index) const;
  inline ::twbTracking::proto::Pose2D* mutable_pose(int index);
  inline ::twbTracking::proto::Pose2D* add_pose();
  inline const ::google::protobuf::RepeatedPtrField< ::twbTracking::proto::Pose2D >&
      pose() const;
  inline ::google::protobuf::RepeatedPtrField< ::twbTracking::proto::Pose2D >*
      mutable_pose();

  // @@protoc_insertion_point(class_scope:twbTracking.proto.Pose2DList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::twbTracking::proto::Pose2D > pose_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_twbTracking_2eproto();
  friend void protobuf_AssignDesc_twbTracking_2eproto();
  friend void protobuf_ShutdownFile_twbTracking_2eproto();

  void InitAsDefaultInstance();
  static Pose2DList* default_instance_;
};
// ===================================================================


// ===================================================================

// Pose2D

// required float x = 1;
inline bool Pose2D::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pose2D::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pose2D::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pose2D::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Pose2D::x() const {
  return x_;
}
inline void Pose2D::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool Pose2D::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pose2D::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pose2D::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pose2D::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Pose2D::y() const {
  return y_;
}
inline void Pose2D::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional int32 id = 3 [default = -1];
inline bool Pose2D::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pose2D::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pose2D::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pose2D::clear_id() {
  id_ = -1;
  clear_has_id();
}
inline ::google::protobuf::int32 Pose2D::id() const {
  return id_;
}
inline void Pose2D::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional float orientation = 4 [default = 0];
inline bool Pose2D::has_orientation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pose2D::set_has_orientation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Pose2D::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Pose2D::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
inline float Pose2D::orientation() const {
  return orientation_;
}
inline void Pose2D::set_orientation(float value) {
  set_has_orientation();
  orientation_ = value;
}

// -------------------------------------------------------------------

// Pose2DList

// repeated .twbTracking.proto.Pose2D pose = 1;
inline int Pose2DList::pose_size() const {
  return pose_.size();
}
inline void Pose2DList::clear_pose() {
  pose_.Clear();
}
inline const ::twbTracking::proto::Pose2D& Pose2DList::pose(int index) const {
  return pose_.Get(index);
}
inline ::twbTracking::proto::Pose2D* Pose2DList::mutable_pose(int index) {
  return pose_.Mutable(index);
}
inline ::twbTracking::proto::Pose2D* Pose2DList::add_pose() {
  return pose_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::twbTracking::proto::Pose2D >&
Pose2DList::pose() const {
  return pose_;
}
inline ::google::protobuf::RepeatedPtrField< ::twbTracking::proto::Pose2D >*
Pose2DList::mutable_pose() {
  return &pose_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace twbTracking

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_twbTracking_2eproto__INCLUDED
